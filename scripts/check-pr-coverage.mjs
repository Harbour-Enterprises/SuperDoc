import { readFileSync } from 'fs';
import { execSync } from 'child_process';

// Get changed files
const baseRef = process.env.BASE_REF;
const changedFiles = execSync(`git diff --name-only --diff-filter=ACMR origin/${baseRef}...HEAD`)
  .toString()
  .split('\n')
  .filter(f => f.match(/\.(js|ts|jsx|tsx)$/) && !f.includes('.test.') && !f.includes('.spec.'));

if (!changedFiles.length) {
  console.log('✅ No source files changed');
  process.exit(0);
}

// Read the coverage report generated by the test run
const coverage = JSON.parse(readFileSync('./coverage/coverage-final.json', 'utf8'));

const threshold = 80;
let failed = false;

console.log('📊 Coverage for changed files:\n');

changedFiles.forEach(file => {
  const fullPath = Object.keys(coverage).find(path => path.includes(file));

  if (fullPath && coverage[fullPath]) {
    const fileCoverage = coverage[fullPath];

    // Calculate percentages
    const lines = fileCoverage.s
      ? (Object.values(fileCoverage.s).filter(v => v > 0).length / Object.keys(fileCoverage.s).length * 100)
      : 0;
    const functions = fileCoverage.f
      ? (Object.values(fileCoverage.f).filter(v => v > 0).length / Object.keys(fileCoverage.f).length * 100)
      : 0;
    const branches = fileCoverage.b
      ? (Object.values(fileCoverage.b).flat().filter(v => v > 0).length / Object.values(fileCoverage.b).flat().length * 100)
      : 0;

    console.log(`${file}:`);
    console.log(`  Lines: ${lines.toFixed(1)}% ${lines < threshold ? '❌' : '✅'}`);
    console.log(`  Functions: ${functions.toFixed(1)}% ${functions < threshold ? '❌' : '✅'}`);
    console.log(`  Branches: ${branches.toFixed(1)}% ${branches < threshold ? '❌' : '✅'}\n`);

    if (lines < threshold || functions < threshold || branches < threshold) {
      failed = true;
    }
  } else {
    console.log(`${file}: No coverage data found ⚠️\n`);
  }
});

if (failed) {
  console.error('❌ Some changed files are below the coverage threshold');
  process.exit(1);
}

console.log('✅ All changed files meet coverage thresholds');